'''12/11/2019 EEprom Datalogger
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program logs data from the analog ports into a 64k EEprom
'''It is backed up via solar and a super capacitor
''' DO NOT FORGET TO PUT JUMPER IN FOR VREF.
'TO DO:
'Use PGD/INT0 to trigger UART dump. Use toggle switch so that it takes
'commands. Or just have it dump all data and erase.
'
'Changes
'1/26/2020- Temperature Sensor Works. Units are °C
'1/19/2020-Board works and turns RB 7 on and off
'4/11/2020-RX needs to be tied high in order to avoid triggering The
'recieve Interrupt
'
'
'
'PIN LIST
'I2C has a 64k EEprom.
'PIC is 18LF13k22 (low power version)
'AN2=Temperature
'AN4=Spare
'AN5=Spare
'AN6=Solar Voltage/Current. Voltage from the solar panel comes in
'through a Divider Resistor (R1=50,R2=50)
'R5=RX
'RB7=TX
'VREF+=2.5V (external)
'RC5= VREF On, Pin Controlled Vref
'RC4= Enable for Analog Power Inputs and External Transmitter
'
'
' MCP9700 Math
'VOUT=TC*TA+V0C
'TC=TEMP CO 10mV per C
'V0C=Voltage at 0 degrees C (500mV)
'TA is the temp we need
'TA=(VOUT-V0C)/10 Or just move decimal
'
'
'''********************************************************************************

; ----- Configuration
#chip 18LF13K22, 4
#config LVP = Off
#config MCLRE = OFF

#config WDTEN= OFF
#option Explicit

#include <i2ceeprom.h>
#include <lowlevel\hwi2c.h>

#define HI2C_BAUD_RATE 400
#define eepDev 0xA0

#define HI2C_DATA PORTB.4
#define HI2C_CLOCK PORTB.6
Dir HI2C_DATA in
Dir HI2C_CLOCK in
HI2CMode Master

#define USART_BAUD_RATE 9600
'#Define USART_TX_BLOCKING
#define USART_BLOCKING

#define ExtEnableON Set PortC.4 ON
#define ExtEnableOFF Set PortC.4 OFF

#define VREF_EN Set PortC.5 ON  'Set Vref On
#define VREF_OFF set PortC.5 OFF  'Set Vref off

'Variables
Dim ADCVal as Byte
Dim AnalogInput2 as Word
Dim Temperature as Byte
Dim AnalogInput6 as Byte
Dim Secs  as Byte
Dim Mins as Byte
Dim Hours as Byte
Dim OldSecs as Byte
Dim DataFrequencySeconds as Byte
Dim DataFrequencyMinutes as Byte
Dim DataFrequencyHour as Byte
Dim EEpromDataAddress as Word
Dim MaxAddress as Word
Dim TempData as Byte
Dim Rec as Byte


Dir PortA IN
Dir PortB.7 Out

'// initalize/clear variables
ADCVal = 0
AnalogInput2 = 0
Hours = 0
Mins = 0
Secs = 0
OldSecs = secs
DataFrequencySeconds = 0
DataFrequencyMinutes = 0
DataFrequencyHour = 0
ExtEnableOFF
VREF_OFF
EEpromDataAddress=0
MaxAddress = 0
OSCCON.7 = 0   'set IDLEN bit to SLEEP mode

'// InitCLock
Settimer 1,32768 '// Prescale for 1 sec
Inittimer1 (ExtOSC,PS1_1) 'select ExtCrystal
Set T1CON.2 On  '// do not sync to FOSC
PIE1.0 = 1
WUE=1
RCIE=1
PEIE=1

Starttimer 1
On interrupt timer1Overflow Call SecondsCounter

'Vref to be external
PVCFG1=0
PVCFG0=1
Rec = HSerReceive

'/////////////////////////////Debug Lines Below

''' --- This is the MAIN LOOP ----
Do
WUE=1
asm sleep
Loop

'''--------End Main ---------------

Sub Take_Data
  VREF_EN'Turn on VREF
  ExtEnableON 'Turn on everthing
  Wait 1 ms
  OldSecs = Secs '// Reset OldSecs

  AnalogInput2 = ReadAD(AN2)
  AnalogInput2 = ((AnalogInput2*10)-500)
  Temperature = AnalogInput2/10
  AnalogInput6 = ReadAD(AN6)
'Record the first Byte
  eeprom_wr_byte ( eepDev, EEpromDataAddress, Temperature)
  EEpromDataAddress=EEpromDataAddress+1
'Record the second Byte
  eeprom_wr_byte ( eepDev, EEpromDataAddress, AnalogInput6)
  EEpromDataAddress=EEpromDataAddress+1
  MaxAddress = EEpromDataAddress
  Wait 5 ms
  VREF_OFF
  ExtEnableOFF

End Sub


Sub SecondsCounter

   TMR1H = 0x80  '// Preload timer
   'TMR1L =   '// Tweak for accuracy
   PIE1.0 = 1
   Secs++ '// Increment seconds
   DataFrequencySeconds++
   WUE=1


    If DataFrequencySeconds = 59 then
      DataFrequencyMinutes++
      DataFrequencySeconds=0

    End if

    If DataFrequencyMinutes = 59 then
      DataFrequencyHour++
      DataFrequencyMinutes=0
    End if


    If DataFrequencyHour = 1 then
      Take_Data
      DataFrequencyHour=0
    end if



   IF secs < 59 then goto exitISR
   Secs = 0 :  Mins++
   IF mins < 59 then goto exitISR
   mins = 0 :  Hours++
   If Hours > 23 then Hours = 0


ExitISR:
'asm sleep
End SUB


Sub Interrupt

  StopTimer 1
  PIE1.0 = 1
  Rec = HSerReceive
  HSerSend 13
  HSerSend 10
  HSerPrint "Interrupt Seen"
  HSerSend 13
  HSerSend 10

    If Rec = "a" then 'spit out data via comma seperated values
        WUE=0
        VREF_EN'Turn on VREF
        ExtEnableON 'Turn on everthing
        StopTimer 1
        PIE1.0 = 0
        EEpromDataAddress=0
        HSerPrint "EEprom Read"
          For EEpromDataAddress = 0 to MaxAddress '16384
            eeprom_rd_byte ( eepDev, EEpromDataAddress, TempData)

            HSerPrint TempData
            HSerSend 44
          next

        StartTimer 1
        VREF_OFF
        ExtEnableOFF
        PIE1.0 = 1
        WUE=1
    else
      StartTimer 1

    end if

  If Rec = "E" then 'erase the eeprom and reset the device
  IntOff
    VREF_EN'Turn on VREF
    ExtEnableON 'Turn on everthing

    StopTimer 1
    PIE1.0 = 0
    WUE=0
    RCIE=0
    PEIE=0
    EEpromDataAddress=0
    For EEpromDataAddress = 0 to MaxAddress
      'WUE=0
      'RCIE=0
      'PEIE=0
      'IntOff
      eeprom_wr_byte ( eepDev, EEpromDataAddress, 0)

      HSerPrint EEpromDataAddress
      'HSerPrint "% Done"
      HSerSend 44
      wait 5 ms
    next

    HSerPrint "Device Erased. Device Resetting"
    asm Reset ' Reset device
    IntOn
    StartTimer 1
    PIE1.0 = 1
    VREF_OFF
    ExtEnableOFF
  else
  StartTimer 1
  PIE1.0 = 1

  end if

  if Rec  = "q" then ' Show Status of the micro.
                     ' Seconds,Minutes,MaxAddress,Temp,Solar
    HSerPrint "Status"
    HSerSend 44 'comma
    HSerPrint DataFrequencySeconds
    HSerSend 44 'comma
    HSerPrint DataFrequencyMinutes
    HSerSend 44 'comma
    HSerPrint MaxAddress
    HSerSend 44 'comma
    HSerPrint Temperature 'Send the value of AN2 over serial.
    HSerSend 44 'comma
    HSerPrint AnalogInput6 'Send the value of AN6 over serial
    HSerSend 44 'comma

  end if

  if Rec  = "m" then ' Show Current EEprom Address
                     '
    HSerPrint "Current EEprom Address: "
    HSerPrint MaxAddress
  end if

  if Rec  = "t" then ' Show Current time
                     '
    HSerPrint "Current Time "
    HSerPrint DataFrequencyMinutes
    HSerSend 58 'colon
    HSerPrint DataFrequencySeconds

  end if

WUE=1
StartTimer 1
End SUB
asm sleep
